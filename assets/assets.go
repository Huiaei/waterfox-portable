// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/Waterfox.lnk (959B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _waterfoxLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x5f\x48\x53\x7f\x18\xc6\x3f\xc7\xf9\xc3\x9f\x75\xa3\x20\x91\x61\x78\x2e\xbc\x08\xd2\xe3\xb6\xf2\xcf\x46\x85\xeb\xcc\x35\xd2\x74\x68\x61\xc4\x09\x5a\x79\xdc\x06\x5b\x9b\x67\x0b\x27\x81\xd1\x95\x29\x16\xe5\x4d\x44\x8a\x52\x82\x06\x35\xaa\xdb\x20\xa2\xcb\xae\x0c\x14\xc2\xc2\xf2\xa2\x24\x21\x06\xd5\x4d\x10\x18\xdf\xe3\x99\xb4\x99\x44\xef\xc5\xfb\x1e\xce\xf3\x3d\xcf\xf7\x79\x1e\xde\xd3\x0e\x48\x15\x45\x88\x7a\x61\x76\x7c\x77\x01\x19\x98\x58\xea\xcf\x4e\x14\x2d\x4a\x57\x3a\x0d\x73\xbe\x5c\x4b\xbc\x1e\xff\xbe\x20\xf9\x6d\x3b\xcd\x83\x12\xf9\x75\x59\xaa\xa0\x3a\xf0\xa1\x73\x5e\x5e\x73\x47\xca\xee\xbd\xf9\x9f\xfd\x76\xfb\x64\x25\xf5\xaa\x5b\x63\x6b\x8d\xe1\x30\xe7\x4c\xc7\xa7\x91\x72\x02\x5d\x9d\xc7\xba\x3c\x43\x0e\x48\x51\x4a\x31\xd9\xe7\xf5\x27\xdc\x87\x04\xa6\x00\xad\x05\x17\x1e\x37\xfb\xb5\x77\x35\x04\x30\x88\x13\xc2\x20\x48\x0c\x19\x1f\x11\xa2\xe8\x24\x81\x16\x92\x84\xd1\x89\x12\xe5\x00\x4e\x14\x7a\xcd\xe7\x5a\xea\x70\xe2\xa0\x89\x66\x53\xc3\x6e\xce\x6c\x6a\x59\x1d\x29\xa3\x27\x98\xd2\x8d\xbe\x78\x1a\x8e\x5a\x5a\x84\x0e\x81\x09\x2d\xcb\x45\x25\x40\x71\x81\x9b\x8a\xd1\x28\x3d\x04\x49\xa1\x63\xd0\x47\x9c\xb4\xc9\xdc\x87\x13\x11\xd8\xcd\x8e\xc4\x7d\x99\x01\x8b\x59\xd1\xd3\xba\x70\x91\x63\x5f\xdd\x64\x6f\xb0\x95\xfc\x21\xda\x23\x21\x3b\x03\x05\xec\x0a\x3a\x69\x74\xa0\x0a\x38\x6b\x4d\xc9\x9a\x0d\xd6\x97\x22\xf9\x4a\xc0\x06\xa8\xcf\xaa\xb4\x32\xc0\x1b\xa9\xe9\xbf\xa4\xcb\x2a\xaa\x5b\x0b\x18\xf1\x90\x11\x8c\xc9\xbe\x48\x54\x4f\x6a\x39\xe7\x5a\xbe\xd0\x5a\x14\x14\xb4\xbc\xbe\x7d\xf0\xda\x96\x20\xb4\x6d\xc5\x57\xa2\xe2\xfe\x47\xb6\x73\x1b\x76\xa6\x4f\x5b\x16\x13\x17\xea\xc2\xc1\x5e\x3d\x99\x0b\xab\x37\x93\x49\x0d\x7e\x7d\xd8\x3a\x7e\xf5\xe3\x83\xa5\xb9\xe1\xe2\xc9\x9f\x8f\x3d\x37\x2e\x7e\x2e\xbf\x73\xeb\xe4\x53\xdb\x8e\xd1\xf6\xbf\xe1\xb3\x40\x29\x4c\x9f\x07\x1c\xdd\x81\xee\x53\xfb\xda\xa7\x06\xa7\x5c\x6d\x73\xf3\x2b\x0b\x75\x2b\x8b\xdf\xca\x01\xf3\x0f\x10\x6d\x7d\x7d\x23\xeb\xff\xc4\x8b\x6a\x40\xa0\x8d\xf8\x70\x71\x10\x3b\x1e\x54\x9c\x34\xe1\xc1\x45\x33\x5e\xbc\x34\x5a\xab\x26\xca\x65\xdd\xf0\x64\x57\xcc\xfb\xe8\x7a\xc2\x3f\xeb\x6f\x51\x66\x0e\xa7\xc7\xf6\x02\x61\x71\xc0\x0f\xbc\x5f\xde\xf3\x65\xf8\x47\xd6\x7f\x3b\xf3\xb6\xad\xe4\xd5\x90\xfd\xf7\xbd\xf8\x15\x00\x00\xff\xff\x56\x7b\xe8\xcc\xbf\x03\x00\x00")

func waterfoxLnkBytes() ([]byte, error) {
	return bindataRead(
		_waterfoxLnk,
		"Waterfox.lnk",
	)
}

func waterfoxLnk() (*asset, error) {
	bytes, err := waterfoxLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Waterfox.lnk", size: 959, mode: os.FileMode(0666), modTime: time.Unix(1556990116, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x15, 0x1c, 0x1c, 0x7d, 0x42, 0x1, 0x1d, 0xc3, 0xd9, 0xcc, 0x12, 0x1b, 0xd6, 0x1d, 0xc7, 0x19, 0x9a, 0x88, 0xb5, 0x8d, 0xcf, 0xf, 0x7d, 0x24, 0x91, 0xa7, 0x4, 0x73, 0x1a, 0xd2, 0xb4, 0xce}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Waterfox.lnk": waterfoxLnk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Waterfox.lnk": &bintree{waterfoxLnk, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
